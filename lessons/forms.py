from django import forms
from django.core.exceptions import ValidationError, FieldDoesNotExist
from .models import Lesson, Exercise

# ---- helpers --------------------------------------------------------------

def has_model_field(model, name: str) -> bool:
    try:
        model._meta.get_field(name)
        return True
    except FieldDoesNotExist:
        return False

def _split_lines(value):
    if not value:
        return []
    if isinstance(value, (list, tuple)):
        return [str(x).strip() for x in value if str(x).strip()]
    raw = str(value).replace("\r\n", "\n").split("\n")
    parts = []
    for line in raw:
        line = line.strip()
        if not line:
            continue
        if ";" in line:
            parts.extend([p.strip() for p in line.split(";") if p.strip()])
        else:
            parts.append(line)
    return parts

def _list_or_text_for_model_field(model, field_name, parts):
    if not has_model_field(model, field_name):
        return None
    field = model._meta.get_field(field_name)
    internal = getattr(field, "get_internal_type", lambda: "")()
    if internal in {"JSONField", "ArrayField"}:
        return parts
    return "; ".join(parts)


# ---- Lesson form ----------------------------------------------------------

class LessonForm(forms.ModelForm):
    # –í—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ –ø–æ–ª—è –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥—É (–∑–∞–≤–∂–¥–∏ —î —É —Ñ–æ—Ä–º—ñ, –∞–ª–µ –Ω–µ –≤ –º–æ–¥–µ–ª—ñ)
    materials_input = forms.CharField(
        label="–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–∫—É)",
        widget=forms.Textarea(attrs={"rows": 4, "placeholder": "—Å–∫–ª—è–Ω–∫–∞\n–ª—ñ—Ö—Ç–∞—Ä–∏–∫\n–∞—Ä–∫—É—à"}),
        required=False
    )
    steps_input = forms.CharField(
        label="–ö—Ä–æ–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥–∫—É)",
        widget=forms.Textarea(attrs={"rows": 6, "placeholder": "–ü–æ—Å—Ç–∞–≤ —Å–∫–ª—è–Ω–∫—É\n–ù–∞–ø—Ä–∞–≤ —Å–≤—ñ—Ç–ª–æ\n–ó–Ω–∞–π–¥–∏ –≤–µ—Å–µ–ª–∫—É"}),
        required=False
    )

    class Meta:
        model = Lesson
        fields = "__all__"   # <‚Äî –∂–æ–¥–Ω–∏—Ö –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–ª—ñ–≤ —Ç—É—Ç

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏/–≤—ñ–¥–∂–µ—Ç–∏ –¥–ª—è —Ç–∏—Ö –ø–æ–ª—ñ–≤, —è–∫—ñ —Å–ø—Ä–∞–≤–¥—ñ —ñ—Å–Ω—É—é—Ç—å —É –º–æ–¥–µ–ª—ñ
        if has_model_field(Lesson, "title"):
            self.fields["title"].widget.attrs.setdefault("placeholder", "–î–æ–º–∞—à–Ω—è –≤–µ—Å–µ–ª–∫–∞")
        if has_model_field(Lesson, "slug"):
            self.fields["slug"].widget.attrs.setdefault("placeholder", "home-rainbow")
        if has_model_field(Lesson, "summary"):
            self.fields["summary"].widget = forms.Textarea(attrs={"rows": 3, "placeholder": "–°–∫–ª—è–Ω–∫–∞ –≤–æ–¥–∏ + —Å–≤—ñ—Ç–ª–æ = –∫–æ–ª—å–æ—Ä–∏!"})
        if has_model_field(Lesson, "duration"):
            self.fields["duration"].widget = forms.NumberInput(attrs={"min": 1, "step": 1})
        if has_model_field(Lesson, "emoji"):
            self.fields["emoji"].widget.attrs.setdefault("maxlength", 4)
            self.fields["emoji"].widget.attrs.setdefault("placeholder", "üåà")

        # –Ø–∫—â–æ —É –º–æ–¥–µ–ª—ñ —î materials/steps ‚Äî —Å—Ö–æ–≤–∞—î–º–æ —ó—Ö (–±–æ –≤–≤–æ–¥–∏–º–æ —á–µ—Ä–µ–∑ *_input)
        if has_model_field(Lesson, "materials"):
            self.fields["materials"].widget = forms.HiddenInput()
        if has_model_field(Lesson, "steps"):
            self.fields["steps"].widget = forms.HiddenInput()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ *_input –∑ —ñ—Å–Ω—É—é—á–∏—Ö –∑–Ω–∞—á–µ–Ω—å (—è–∫—â–æ —Ç–∞–∫—ñ –ø–æ–ª—è —î –≤ –º–æ–¥–µ–ª—ñ)
        if self.instance and self.instance.pk:
            def as_lines(val):
                if isinstance(val, (list, tuple)):
                    return "\n".join([str(x).strip() for x in val if str(x).strip()])
                return str(val or "").replace("; ", "\n").replace(";", "\n")
            if has_model_field(Lesson, "materials"):
                self.fields["materials_input"].initial = as_lines(getattr(self.instance, "materials"))
            if has_model_field(Lesson, "steps"):
                self.fields["steps_input"].initial = as_lines(getattr(self.instance, "steps"))

    def clean(self):
        cleaned = super().clean()

        # –Ø–∫—â–æ –≤ –º–æ–¥–µ–ª—ñ —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–ª—è ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —Ç—É–¥–∏ –∑ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö textarea
        if has_model_field(Lesson, "materials"):
            mats_list = _split_lines(cleaned.get("materials_input"))
            cleaned["materials"] = _list_or_text_for_model_field(Lesson, "materials", mats_list)
        if has_model_field(Lesson, "steps"):
            steps_list = _split_lines(cleaned.get("steps_input"))
            cleaned["steps"] = _list_or_text_for_model_field(Lesson, "steps", steps_list)

        # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–∑–≤–∏ (–ª–∏—à–µ —è–∫—â–æ –ø–æ–ª–µ —ñ—Å–Ω—É—î)
        if has_model_field(Lesson, "title") and not cleaned.get("title"):
            raise ValidationError("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É —É—Ä–æ–∫—É.")
        return cleaned


# ---- Exercise form --------------------------------------------------------

class ExerciseForm(forms.ModelForm):
    class Meta:
        model = Exercise
        fields = "__all__"

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if "order" in self.fields:
            self.fields["order"].widget = forms.NumberInput(attrs={"min": 0, "step": 1})
        if "title" in self.fields:
            self.fields["title"].widget.attrs.setdefault("placeholder", "–ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞")
        # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–∑–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        for name in ("instructions", "description", "content"):
            if name in self.fields:
                self.fields[name].widget = forms.Textarea(attrs={"rows": 5, "placeholder": "–û–ø–∏—Å –≤–ø—Ä–∞–≤–∏ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"})
                break
